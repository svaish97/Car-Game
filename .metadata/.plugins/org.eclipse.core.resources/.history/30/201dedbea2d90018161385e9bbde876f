import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.Timer;
public class work extends JPanel implements ActionListener,KeyListener{
	private int space;
	private int speed;
	private int width=80;
	private int height=70;
	private int WIDTH=500;
	private int HEIGHT=700;
	private int move=20;
	BufferedImage bg,road,mycar,opcar;
	private Rectangle car;
	private Random rand;
	Timer t;
	private ArrayList<Rectangle> ocars;
	
	
	public work(){
		try {
			bg=ImageIO.read(new File("C:\\Users\\Saurabh\\Desktop\\grass.png"));
			road=ImageIO.read(new File("C:\\Users\\Saurabh\\Desktop\\road.png"));
			mycar=ImageIO.read(new File("C:\\Users\\Saurabh\\Desktop\\mycar.png"));
			opcar=ImageIO.read(new File("C:\\Users\\Saurabh\\Desktop\\opcar.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		
		t=new Timer(20,this);
		rand=new Random();
		addKeyListener(this);
		setFocusable(true);
		ocars= new ArrayList<Rectangle>();
		car = new Rectangle (WIDTH/2-90,HEIGHT-100,width,height);
		space = 300;
		speed=2;
		
		addocars(true);
		addocars(true);
		
		t.start();
	}
	
	public void addocars(boolean first) {
		int positionX= rand.nextInt()%2; 	
		int x=0,y=0,Width=width,Height=height;
		if(positionX==0) {
			x=WIDTH/2-90;
		}
		else {
			x=WIDTH/2+10;
		}
		
		if(first) {
			ocars.add(new Rectangle(x,y-100-(ocars.size()*space),Width,Height));
		}
		else {
			ocars.add(new Rectangle(x,ocars.get(ocars.size()-1).y-space,Width,Height));
		}
		
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.drawImage(bg,0,0,null);
		g.drawImage(road,WIDTH/2-100,0,null);
		g.drawImage(mycar, car.x+21, car.y, null);

		for(Rectangle rect:ocars) {
			g.drawImage(opcar, rect.x, rect.y, null);
		}
	}
	
	
	@Override
	public void actionPerformed(ActionEvent arg0) {
		Rectangle rect;
		for(int i=0;i<ocars.size();i++) {
			rect=ocars.get(i);
			
			rect.y+=speed;
		}
		for(Rectangle r:ocars) {
			if(r.intersects(car)) {
				System.exit(0);
				car.y=r.y+height;
			}
		}
		
		for(int i=0;i<ocars.size();i++) {
			rect=ocars.get(i);
			if(rect.y+rect.height>HEIGHT) {
				ocars.remove(rect);
				addocars(false);
			}
			
		}
		
		repaint();
		
		
	}
	
	
	
	
	public void moveup()
	{
		if(car.y-move<0) {
		}else {
			car.y-=move;
		}
	}
	public void movedown()
	{
		if(car.y+move+car.height>HEIGHT-1) {
		}else {
			car.y+=move;
		}
	}
	
	public void moveleft()
	{
		if(car.x-move<WIDTH/2-90) {
		}else {
			car.x-=move;
		}
	}
	
	public void moveright()
	{
		if(car.x+move>WIDTH/2+10) {
		}else {
			car.x+=move;
		}
	}

	@Override
	public void keyPressed(KeyEvent arg0) {
		int key =arg0.getKeyCode();
		switch(key) {
		case KeyEvent.VK_UP:
			moveup();
			break;
		case KeyEvent.VK_DOWN:
			movedown();
			break;
		case KeyEvent.VK_RIGHT:
			moveright();
			break;
		case KeyEvent.VK_LEFT:
			moveleft();
			break;
		default:
			break;
		}
		
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		int key =arg0.getKeyCode();
		switch(key) {
		case KeyEvent.VK_UP:
			moveup();
			break;
		case KeyEvent.VK_DOWN:
			movedown();
			break;
		case KeyEvent.VK_RIGHT:
			moveright();
			break;
		case KeyEvent.VK_LEFT:
			moveleft();
			break;
		default:
			break;
		}
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		
	}



}
